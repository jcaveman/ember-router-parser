'use strict';

/**
 * Constructor for Comments model
 * @param {object} comments - Comments from AST generated by esprima (using the
 *        comment and range options)
 */
function Comments(comments) {
  this.format(comments);
}

/**
 * Object representing the comments . The format of the object will be:
 * {
 *   <index>: <value>
 * }
 * Where <index> is a number representing the end of the range for this comment.
 * <value> is the value of the comment
 * @type {array} array of comments as provided by esprima
 */
Comments.prototype.comments = {};

/**
 * Grabs comments array from AST and transforms it into this.comments format
 * @param {array} comments - Comments array from esprima
 */
Comments.prototype.format = function(comments) {
  this.comments = {};

  if (!comments) {
    return;
  }

  for (var i = 0; i < comments.length; i++) {
    this.comments[comments[i].range[1]] = comments[i].value;
  }
};

/**
 * Checks if this route should be documented based on annotations
 * @param {object} expression - ExpressionStatement parsed by esprima
 * @returns {boolean} Returns true if this expression should be documented
 */
Comments.prototype.shouldDocumentRoute = function(expression) {
  var commentIndex = expression.range[0];
  var current = this.comments[commentIndex] || this.comments[commentIndex - 1];

  if (!current) {
    return false;
  }

  if (current.indexOf('@documentUrl') === -1) {
    return false;
  }

  return true;
};

module.exports = Comments;
